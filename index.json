[{"categories":["AI"],"content":" 注意 以下将 MCP (主要指服务端) 和 FunctionCall (主要指 OpenAI chat 规范的函数调用) 都笼统称为“插件”，方便快速理解， 模型本身不具备调用 function 或 mcp Server 的能力 两者都是告诉远程模型，客户端具备那些额外能力(如天气插件、数据库插件、画图插件)，模型依据当前上下文 (当前语句)，判断当前场景是否应该执行某几个插件, 以及参数是什么,并返回一个特殊的响应，将结果返回到客户端 模型本身只是返回各种\"文本\" 当客户端(如 CherryStudio、NextChat、openwebui) 观察到模型返回了某种特殊的响应文本，客户端就执行模型响应文本中告知的插件，当然，客户端可以完全无视模型的特殊响应 一个简易的流程如下 ","date":"2025-04-02","objectID":"/mcpfunctioncall%E7%A7%91%E6%99%AE/:0:0","tags":["MCP/科普"],"title":"MCP、FunctionCall科普","uri":"/mcpfunctioncall%E7%A7%91%E6%99%AE/"},{"categories":["AI"],"content":"FunctionCall 以获取本地天气为例子 请求结构如下： 通过 functions 或 tools (最新的 functions 的别名) 告知了模型，当前客户端具备获取天气的能力 { \"messages\": [ { \"role\": \"system\", \"content\": \"You are a helpful assistant.\" }, { \"role\": \"user\", \"content\": \"今天上海天气怎么样？，湿度怎么样？\" } ], \"functions\": [ { \"name\": \"get_localtion_weather\", \"description\": \"get_localtion_weather，获取某个地点的当前天气情况\", \"parameters\": { \"type\": \"object\", \"properties\": { \"localtion\": { \"type\": \"string\", \"description\": \"localtion,地点\" }, \"need_humidity\":{ \"type\":\"boolean\", \"description\":\"是否返回湿度，默认为false\" } }, \"required\": [ \"localtion\" ] } } ], \"function_call\": \"auto\", \"temperature\": 0.5, \"stream\":false, \"model\": \"gpt-4o\" } curl --location 'https://api.xxxxx.com/v1/chat/completions' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Bearer sk-xxxxx' \\ --data '{ \"messages\": [ { \"role\": \"system\", \"content\": \"You are a helpful assistant.\" }, { \"role\": \"user\", \"content\": \"今天上海天气怎么样？，湿度怎么样？\" } ], \"functions\": [ { \"name\": \"get_localtion_weather\", \"description\": \"get_localtion_weather，获取某个地点的当前天气情况\", \"parameters\": { \"type\": \"object\", \"properties\": { \"localtion\": { \"type\": \"string\", \"description\": \"localtion,地点\" }, \"need_humidity\":{ \"type\":\"boolean\", \"description\":\"是否返回湿度，默认为false\" } }, \"required\": [ \"localtion\" ] } } ], \"function_call\": \"auto\", \"temperature\": 0.5, \"stream\":false, \"model\": \"gpt-4o\" }' 响应结构如下： 客户端执行本地的 get_localtion_weather 函数 整体流程如图所示 (下图截取自 OpenAI 的文档，翻译来自沉浸式翻译) ","date":"2025-04-02","objectID":"/mcpfunctioncall%E7%A7%91%E6%99%AE/:1:0","tags":["MCP/科普"],"title":"MCP、FunctionCall科普","uri":"/mcpfunctioncall%E7%A7%91%E6%99%AE/"},{"categories":["AI"],"content":"MCP 简单理解：functionCall 是大家自己写自己的，没有一种统一的约定，而 MCP 是一种君子约定，mcpServer (查询天气插件) 遵循 MCP 协议开发，由 mcpClient (Cursor) 调用，原本需要自己写函数，现在变成了调用别人的库 MCP 重点在于 MCP 客户端 (Cherry Studio) 如何发现 MCP 服务端 (“插件”)、理解 “插件”具备的能力、调用“插件”、获取“插件”的响应结果 至于 将当前具备的插件功能发送到模型 (functions (别名 tools) 描述方式、提示词方式) MCP 客户端 (Cherry Studio) 如何根据模型的响应判断执行是否执行“插件”，执行那几个插件，则是客户端自己定义 MCP 客户端将插件执行结果返回给模型，也是可以自己定义 以下部分只是在应用领域领域，举例描述了结合MCP 对话流程，并没有对 MCP 这个“君子约定”做具体的详解 ","date":"2025-04-02","objectID":"/mcpfunctioncall%E7%A7%91%E6%99%AE/:2:0","tags":["MCP/科普"],"title":"MCP、FunctionCall科普","uri":"/mcpfunctioncall%E7%A7%91%E6%99%AE/"},{"categories":["AI"],"content":"Cherry Studio 举例 配置 mcpServers 如下，其中只有一个获取 和风天气 的 server 源自：HeFeng Weather MCP Server | Glama { \"mcpServers\": { \"hefeng-weather\": { \"isActive\": true, \"command\": \"npx\", \"args\": [ \"hefeng-mcp-weather@latest\", \"--apiKey=key-123132131321\" ] } } } 对话如下 查看本地拦截的第一次请求，可以发现是通过 tools 描述的方式，告诉模型，本地具备那些“插件”以及具备什么能力 { \"model\": \"gpt-4o\", \"messages\": [ { \"role\": \"user\", \"content\": \"今天上海天气怎么样？\" } ], \"temperature\": 0.7, \"max_tokens\": 2000, \"stream\": true, \"tools\": [ { \"type\": \"function\", \"function\": { \"name\": \"fd71edc4f65924613b9fd8330e78eb243\", \"description\": \"获取中国国内的天气预报\", \"parameters\": { \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"逗号分隔的经纬度信息 (e.g., 116.40,39.90)\" }, \"days\": { \"type\": \"string\", \"enum\": [ \"now\", \"24h\", \"72h\", \"168h\", \"3d\", \"7d\", \"10d\", \"15d\", \"30d\" ], \"description\": \"预报天数，now为实时天气，24h为24小时预报，72h为72小时预报，168h为168小时预报，3d为3天预报，以此类推\" } } } } } ] } 查看第一次响应，模型判断是否执行触发调用插件。 模型判断执行需要用到\"天气插件\"，模型本身只是做了判断 MCP 客户端 (Cherry Studio) 执行“天气插件”，可以简单看作调用了一个别人写好的包或API 将执行结果返回给模型，也就是加入对话上下文 { \"model\": \"gpt-4o\", \"messages\": [ { \"role\": \"user\", \"content\": \"今天上海天气怎么样？\" }, { \"role\": \"assistant\", \"tool_calls\": [ { \"id\": \"call_M4eYNv6oPaLunpZLe1iWdfiK\", \"function\": { \"name\": \"fd71edc4f65924613b9fd8330e78eb243\", \"arguments\": \"{\\\"days\\\":\\\"now\\\",\\\"location\\\":\\\"121,31\\\"}\" }, \"type\": \"function\" } ] }, { \"role\": \"tool\", \"content\": \"[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"地点: 121,31\\\\n观测时间: 2025-03-27T16:51+08:00\\\\n天气: 阴\\\\n温度: 13°C\\\\n体感温度: 12°C\\\\n风向: 东北风\\\\n风力: 1级\\\"}]\", \"tool_call_id\": \"call_M4eYNv6oPaLunpZLe1iWdfiK\" } ], \"temperature\": 0.7, \"max_tokens\": 2000, \"stream\": true, \"tools\": [ { \"type\": \"function\", \"function\": { \"name\": \"fd71edc4f65924613b9fd8330e78eb243\", \"description\": \"获取中国国内的天气预报\", \"parameters\": { \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"逗号分隔的经纬度信息 (e.g., 116.40,39.90)\" }, \"days\": { \"type\": \"string\", \"enum\": [ \"now\", \"24h\", \"72h\", \"168h\", \"3d\", \"7d\", \"10d\", \"15d\", \"30d\" ], \"description\": \"预报天数，now为实时天气，24h为24小时预报，72h为72小时预报，168h为168小时预报，3d为3天预报，以此类推\" } } } } } ] } 模型结合上下文 (发送的对话历史) 进行响应 截取其中一部分 Cherry Studio 是通过 functionCall 的方式，判断应该执行那些“插件”的功能 ","date":"2025-04-02","objectID":"/mcpfunctioncall%E7%A7%91%E6%99%AE/:2:1","tags":["MCP/科普"],"title":"MCP、FunctionCall科普","uri":"/mcpfunctioncall%E7%A7%91%E6%99%AE/"},{"categories":["AI"],"content":"自定义协议 (使用系统提示词的方式) 你是一个智能助手，你具备MCP功能，MCP可以理解为一种本地功能插件，当用户的语句需要调用插件时，你应该严格按照以下规定返回，规定如下: \u003cplug\u003e \u003cpn\u003e插件名称\u003c/pn\u003e \u003cfn\u003e函数名称(功能名称)\u003c/fn\u003e \u003carg1\u003e参数\u003c/arg1\u003e \u003carg2\u003e参数2\u003carg2\u003e \u003carg3\u003e参数3\u003carg3\u003e \u003cplug/\u003e。 当本地执行了某插件后，结果回按照以下格式返回 \u003ctool_res\u003e \u003cplug\u003e \u003cpn\u003e插件名称\u003c/pn\u003e \u003cfn\u003e函数名称(功能名称)\u003c/fn\u003e \u003cres\u003e执行结果\u003cres/\u003e \u003cplug/\u003e \u003ctool_res/\u003e 当前本地插件: 1.插件名称：get_localtion_weather 描述：查询某个地点天气插件 功能： - query_now_weather: args: location:string,必需的,查询地点 need_humidity：boolean,非必需的，默认为false，是否返回湿度 图中所示为 ChatBox，其他的客户端会对 \u003cxx\u003e\u003cxx/\u003e 进行处理，显示不出来 ","date":"2025-04-02","objectID":"/mcpfunctioncall%E7%A7%91%E6%99%AE/:2:2","tags":["MCP/科普"],"title":"MCP、FunctionCall科普","uri":"/mcpfunctioncall%E7%A7%91%E6%99%AE/"},{"categories":["AI"],"content":"参考视频和链接🔗 MCP是怎么对接大模型的？抓取AI提示词，拆解MCP的底层原理_哔哩哔哩_bilibili 【大模型函数调用】function calling及自动发邮件案例_哔哩哔哩_bilibili 🫴手把手教你QwQ-32B如何玩转function call_哔哩哔哩_bilibili 7分钟讲清楚MCP是什么 ","date":"2025-04-02","objectID":"/mcpfunctioncall%E7%A7%91%E6%99%AE/:3:0","tags":["MCP/科普"],"title":"MCP、FunctionCall科普","uri":"/mcpfunctioncall%E7%A7%91%E6%99%AE/"},{"categories":["博客"],"content":"1. 介绍 这是我的第一篇博客，用来记录我的学习过程，以及一些想法。 ","date":"2025-04-01","objectID":"/first_post/:1:0","tags":["博客","学习","感想"],"title":"我的第一篇博客","uri":"/first_post/"},{"categories":["博客"],"content":"2. 感想 写博客是一种很好的学习方式，可以加深对知识的理解，同时也可以分享自己的心得体会。 ","date":"2025-04-01","objectID":"/first_post/:2:0","tags":["博客","学习","感想"],"title":"我的第一篇博客","uri":"/first_post/"},{"categories":["博客"],"content":"3. 总结 希望我的博客能够坚持下去，不断进步。 package main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } ","date":"2025-04-01","objectID":"/first_post/:3:0","tags":["博客","学习","感想"],"title":"我的第一篇博客","uri":"/first_post/"},{"categories":null,"content":"关于我","date":"0001-01-01","objectID":"/about/","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于我 大家好,我是一名热爱技术和写作的程序员。这个博客主要用来记录我在学习和工作中的心得体会。 ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"我的兴趣 编程开发 技术写作 开源项目 持续学习 ","date":"0001-01-01","objectID":"/about/:1:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"联系方式 如果你对我的文章有任何问题或建议,欢迎通过以下方式联系我: Email: your-email@example.com GitHub: your-github ","date":"0001-01-01","objectID":"/about/:1:2","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"博客 这个博客使用 Hugo 构建,主题是 LoveIt。我会在这里分享: 技术教程和笔记 项目开发经验 学习心得 生活随笔 希望能在这里结识更多志同道合的朋友。让我们一起交流,共同进步! ","date":"0001-01-01","objectID":"/about/:1:3","tags":null,"title":"关于","uri":"/about/"}]